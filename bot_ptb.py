# pip install python-telegram-bot==20.3

import sqlite3  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import re
import os
import random
import logging
from typing import Dict, List, Tuple
import time  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
from telegram.error import Conflict  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
    ReplyKeyboardMarkup,
    InputMediaPhoto,
)

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)

from database import (
    create_ad, get_ad, update_ad_text, set_ad_photos,
    set_ad_contact, set_ad_paid, set_ad_published, delete_ad
)

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@live_myakinino_park"       # –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π -100xxxxxxxxx
ADMIN_ID = 6233188035              # —Ç–≤–æ–π Telegram user id (—á–∏—Å–ª–æ)

# –û–ø–ª–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
PROVIDER_TOKEN = ""                # —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–ÆKassa/CloudPayments)
PRIORITY_PRICE_COP = 30000         # 300 ‚ÇΩ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

MAX_PHOTOS = 6  # –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: –¥–æ 6 —Ñ–æ—Ç–æ

# –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è
BANNED_WORDS = ["–º–æ—à–µ–Ω–Ω", "–Ω–∞—Ä–∫–æ—Ç", "–æ—Ä—É–∂", "–ø–æ–¥–¥–µ–ª", "—ç—Ä–æ—Ç", "–∏–Ω–≤–µ—Å—Ç", "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫"]
URL_RE = re.compile(r"https?://\S+|www\.\S+", re.IGNORECASE)
MIN_LEN = 10

# –°—Å—ã–ª–∫–∏
CHANNEL_PIN_URL = "https://t.me/zk_baraholka/7"   # –∑–∞–∫—Ä–µ–ø –∫–∞–Ω–∞–ª–∞ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞)
RULES_URL = "https://t.me/zk_baraholka/7"        # –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞

# –ò–º—è –∞–¥–º–∏–Ω–∞ (–±–µ–∑ @). –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ADMIN_ID.
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "@live_help_team")
# ===================================

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("baraholka")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
(CATEGORY, TEXT, PHOTOS, CONTACT, CONFIRM, PAYMENT) = range(6)

# –ü–∞–º—è—Ç—å –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (MVP –±–µ–∑ –ë–î)
# ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...
from database import (
    create_ad, get_ad, update_ad_text, set_ad_photos,
    set_ad_contact, set_ad_paid, set_ad_published, delete_ad
)

# ===== –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ (reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) =====
BTN_SELL        = "üí∞ –ü—Ä–æ–¥–∞—Ç—å"
BTN_FIND        = "üîç –ù–∞–π—Ç–∏"
BTN_SERVICE     = "üéØ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —É—Å–ª—É–≥—É"
BTN_ADS         = "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
BTN_FIND_SVC    = "üõ†Ô∏è –ù–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å"
BTN_FIND_MASTER = "üíÖ –ù–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞"
BTN_DEALS       = "üî• –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
BTN_RULES       = "‚û°Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
BTN_BONUS       = "üéÅ –ü–æ–ª—É—á–∏—Ç—å 150 ‚ÇΩ"
BTN_PLAY        = "üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å"
BTN_ASK         = "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
BTN_CONTACTS    = "‚òéÔ∏è –í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"

# ===== –ò–ì–†–´: –¥–∞–Ω–Ω—ã–µ =====
GAME_BTN_TL   = "‚úÖ‚ùå –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å"
GAME_BTN_RPS  = "‚úä‚úã‚úåÔ∏è –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
GAME_BTN_FACT = "üòÑ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ —à—É—Ç–∫–∞"

TRUTH_OR_LIE: List[Tuple[str, bool]] = [
    ("–°–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ –∑–≤–µ–∑–¥–∞.", True),
    ("–£ —É–ª–∏—Ç–∫–∏ —á–µ—Ç—ã—Ä–µ —Å–µ—Ä–¥—Ü–∞.", False),
    ("–ê–º–∞–∑–æ–Ω–∫–∞ ‚Äî —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –º–∏—Ä–∞.", True),
    ("–ß–µ–ª–æ–≤–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 100% –º–æ–∑–≥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.", False),
    ("–ü–∏–Ω–≥–≤–∏–Ω—ã –∂–∏–≤—É—Ç –Ω–∞ –°–µ–≤–µ—Ä–Ω–æ–º –ø–æ–ª—é—Å–µ.", False),
    ("–ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç —É–¥–∞—Ä–∏—Ç—å –≤ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –¥–≤–∞–∂–¥—ã.", True),
    ("–ó–µ–º–ª—è –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ–∫—Ä—É–≥ –°–æ–ª–Ω—Ü–∞.", True),
    ("–í –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–µ –µ—Å—Ç—å –º–µ–¥–≤–µ–¥–∏.", False),
    ("–í–æ–¥–∞ –∫–∏–ø–∏—Ç –ø—Ä–∏ 50¬∞C.", False),
    ("–ö–æ—à–∫–∏ –º–æ–≥—É—Ç –º—É—Ä–ª—ã–∫–∞—Ç—å.", True),
]

FACTS_OR_JOKES: List[str] = [
    "–§–∞–∫—Ç: –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –≤–æ–π–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª–∏–ª–∞—Å—å –æ–∫–æ–ª–æ 38 –º–∏–Ω—É—Ç.",
    "–®—É—Ç–∫–∞: ‚Äî –î–æ–∫—Ç–æ—Ä, —è –≤–∏–∂—É –±—É–¥—É—â–µ–µ! ‚Äî –ò –∫–∞–∫ –æ–Ω–æ? ‚Äî –†–∞—Å–ø–ª—ã–≤—á–∞—Ç–æ–µ‚Ä¶ —É –≤–∞—Å –æ—á–∫–∏ –∑–∞–ø–æ—Ç–µ–ª–∏.",
    "–§–∞–∫—Ç: –£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–®—É—Ç–∫–∞: –ú–æ—è –¥–∏–µ—Ç–∞ –ø—Ä–æ—Å—Ç–∞: –µ—Å–ª–∏ —è –Ω–µ –≤–∏–∂—É –µ–¥—ã ‚Äî —è —Å–ø–ª—é.",
    "–§–∞–∫—Ç: –ú—ë–¥ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.",
    "üêù –ü—á—ë–ª—ã –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ –ª—é–¥–µ–π.",
    "üåç –í –º–∏—Ä–µ –±–æ–ª—å—à–µ –∫—É—Ä, —á–µ–º –ª—é–¥–µ–π.",
    "üòÇ –ü–æ—á–µ–º—É —É—Ç–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É? –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É!",
    "ü™ê –ù–∞ –Æ–ø–∏—Ç–µ—Ä–µ –∏–¥—ë—Ç –¥–æ–∂–¥—å –∏–∑ –∞–ª–º–∞–∑–æ–≤.",
    "üòÑ ‚Äî –ß—Ç–æ —Å–∫–∞–∑–∞–ª –Ω–æ–ª—å –≤–æ—Å—å–º—ë—Ä–∫–µ? ‚Äî –ö–ª–∞—Å—Å–Ω—ã–π —Ä–µ–º–µ–Ω—å!",
]
# ===== –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∏–≥—Ä =====


# ==== –£–¢–ò–õ–ò–¢–ê –ê–í–¢–û-–ú–û–î–ï–†–ê–¶–ò–ò ====
def auto_moderate(text: str) -> Tuple[bool, str]:
    t = (text or "").lower()
    for w in BANNED_WORDS:
        if w in t:
            return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ¬´{w}¬ª."
    if URL_RE.search(text or ""):
        return False, "–°—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã."
    if not text or len(text.strip()) < MIN_LEN:
        return False, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º {MIN_LEN} —Å–∏–º–≤–æ–ª–æ–≤)."
    return True, ""


# ==== –°–¢–ê–†–¢ + –ú–ï–ù–Æ ====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n"
        "–Ø –õ–∞–π–≤–±–æ—Ç ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ñ–ö.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ —Ç—ã –∏—â–µ—à—å.\n"
        "–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
        
    )

    buttons = [
        [BTN_SELL, BTN_FIND],
        [BTN_SERVICE, BTN_ADS],
        [BTN_FIND_SVC, BTN_FIND_MASTER],
        [BTN_DEALS, BTN_BONUS],
        [BTN_PLAY, BTN_CONTACTS],
        [BTN_ASK, BTN_RULES],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await update.message.reply_text(
        text, reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True
    )


# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ú–ï–ù–Æ (reply) ====
async def start_new_with_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    uid = update.effective_user.id
    pending[uid] = {"category": category, "text": "", "photos": [], "contact": "", "paid": False}
    await update.message.reply_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)."
    )
    return TEXT

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (update.message.text or "").strip()

    if msg == BTN_PLAY:
        await handle_play(update, context)
        return

    if msg == BTN_SELL:
        return await start_new_with_category(update, context, "–ü—Ä–æ–¥–∞–∂–∞")

    if msg == BTN_SERVICE:
        return await start_new_with_category(update, context, "–£—Å–ª—É–≥–∏")

    if msg == BTN_FIND:
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤–µ–ª–æ—Å–∏–ø–µ–¥¬ª, ¬´—Å–¥–∞—é¬ª, ¬´—É—Å–ª—É–≥–∏ —Ä–µ–º–æ–Ω—Ç–∞¬ª.",
            disable_web_page_preview=True,
        )
        return

    if msg == BTN_ADS:
        contact_text = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ–∫–ª–∞–º—ã."
        if ADMIN_USERNAME:
            contact_text += f" –ü–∏—à–∏—Ç–µ: @{ADMIN_USERNAME}"
        else:
            contact_text += f" ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_ID}"
        await update.message.reply_text(contact_text)
        return

    if msg == BTN_FIND_SVC:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –≤—ã –∏—â–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–ª–∏–Ω–∏–Ω–≥, –¥–æ—Å—Ç–∞–≤–∫–∞, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä) ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏–ª–∏ –¥–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã."
        )
        return

    if msg == BTN_FIND_MASTER:
        await update.message.reply_text(
            "–ö–∞–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏—â–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫, —ç–ª–µ–∫—Ç—Ä–∏–∫, –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä)\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã."
        )
        return

    if msg == BTN_DEALS:
        await update.message.reply_text(
            "–°–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ —Ö—ç—à—Ç–µ–≥—É #–∞–∫—Ü–∏–∏.\n"
            "–ü–µ—Ä–µ–π—Ç–∏: https://t.me/zk_baraholka",
            disable_web_page_preview=True,
        )
        return

    if msg == BTN_BONUS:
        await update.message.reply_text(
            "üéÅ –ë–æ–Ω—É—Å 150 ‚ÇΩ: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ –∫–∞–Ω–∞–ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω ‚Äî –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å.\n"
            "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    if msg == BTN_CONTACTS:
        await update.message.reply_text(
            "–í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ñ–ö:\n"
            "‚Ä¢ –û—Ö—Ä–∞–Ω–∞: +7 (000) 000-00-00\n"
            "‚Ä¢ –£–ö: +7 (000) 000-00-01\n"
            "‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 (000) 000-00-02\n"
            "‚Ä¢ –ö–æ–Ω—Å—å–µ—Ä–∂: +7 (000) 000-00-03"
        )
        return

    if msg == BTN_ASK:
        if ADMIN_USERNAME:
            await update.message.reply_text(f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{ADMIN_USERNAME}")
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if msg == BTN_RULES:
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ö–∞–Ω–∞–ª –ñ–ö –õ–ê–ô–í", url="https://t.me/zk_baraholka/7")]]
        )
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=kb
        )
        return



    return


# ==== –ò–ì–†–´ ====
async def handle_play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton(GAME_BTN_TL,   callback_data="game_tl")],
        [InlineKeyboardButton(GAME_BTN_RPS,  callback_data="game_rps")],
        [InlineKeyboardButton(GAME_BTN_FACT, callback_data="game_fact")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=InlineKeyboardMarkup(kb))

async def game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    # –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å ‚Äî –≤–æ–ø—Ä–æ—Å
    if q.data == "game_tl":
        stmt, ans = random.choice(TRUTH_OR_LIE)
        context.user_data["tl_answer"] = ans
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data="tl_true"),
                InlineKeyboardButton("‚ùå –õ–æ–∂—å",   callback_data="tl_false"),
            ]
        ])
        await q.edit_message_text(f"–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å?\n\n{stmt}", reply_markup=kb)
        return

    # –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å ‚Äî –æ—Ç–≤–µ—Ç
    if q.data in ("tl_true", "tl_false"):
        user_ans = (q.data == "tl_true")
        correct = context.user_data.get("tl_answer")
        text = "üéâ –í–µ—Ä–Ω–æ!" if user_ans == correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ï—â—ë", callback_data="game_tl")]])
        await q.edit_message_text(text, reply_markup=kb)
        return

    # –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ ‚Äî –≤—ã–±–æ—Ä
    if q.data == "game_rps":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úä", callback_data="rps_rock"),
                InlineKeyboardButton("‚úã", callback_data="rps_paper"),
                InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors"),
            ]
        ])
        await q.edit_message_text("–í—ã–±–µ—Ä–∏: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞", reply_markup=kb)
        return

    # –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ ‚Äî —Ä–∞—É–Ω–¥
    if q.data.startswith("rps_"):
        user_choice = q.data.split("_")[1]  # rock/paper/scissors
        bot_choice = random.choice(["rock", "paper", "scissors"])
        names = {"rock": "‚úä –ö–∞–º–µ–Ω—å", "paper": "‚úã –ë—É–º–∞–≥–∞", "scissors": "‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã"}

        result = "–ù–∏—á—å—è!"
        if (user_choice, bot_choice) in [
            ("rock", "scissors"), ("scissors", "paper"), ("paper", "rock")
        ]:
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ"
        elif user_choice != bot_choice:
            result = "–Ø –≤—ã–∏–≥—Ä–∞–ª! üòé"

        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úä", callback_data="rps_rock"),
                InlineKeyboardButton("‚úã", callback_data="rps_paper"),
                InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors"),
            ],
            [InlineKeyboardButton("üîÅ –ï—â—ë", callback_data="game_rps")],
        ])
        await q.edit_message_text(
            f"–¢—ã: {names[user_choice]}\n–Ø: {names[bot_choice]}\n\n{result}",
            reply_markup=kb,
        )
        return

    # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç/—à—É—Ç–∫–∞
    if q.data == "game_fact":
        await q.edit_message_text(random.choice(FACTS_OR_JOKES))
        return


# ==== –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ====
async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (context.user_data)
    ad_id = create_ad(user.id, None)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∫–∞ None
    context.user_data['current_ad_id'] = ad_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    kb = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞", callback_data="cat_sale")],
        [InlineKeyboardButton("–£—Å–ª—É–≥–∏", callback_data="cat_service")],
        [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞", callback_data="cat_buy")],
        [InlineKeyboardButton("–û—Ç–¥–∞–º/–û–±–º–µ–Ω", callback_data="cat_free")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(kb))
    return CATEGORY

async def on_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        q = update.callback_query
        await q.answer()
        user = q.from_user

        # –î–æ—Å—Ç–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ad_id = context.user_data.get('current_ad_id')
        log.info(f"User {user.id} selected category for ad {ad_id}")
        if not ad_id:
            await q.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        cat_map = {
            "cat_sale": "–ü—Ä–æ–¥–∞–∂–∞",
            "cat_service": "–£—Å–ª—É–≥–∏",
            "cat_buy": "–ü–æ–∫—É–ø–∫–∞",
            "cat_free": "–û—Ç–¥–∞–º/–û–±–º–µ–Ω",
            "cat_other": "–î—Ä—É–≥–æ–µ",
        }
        selected_category = cat_map.get(q.data, "–î—Ä—É–≥–æ–µ")
        log.info(f"Selected category: {selected_category}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('baraholka.db')
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE ads SET category = ? WHERE id = ? AND user_id = ?',
            (selected_category, ad_id, user.id)
        )
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å
        if cursor.rowcount == 0:
            log.error(f"Failed to update category for ad {ad_id}. No rows affected.")
            await q.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /new")
            conn.close()
            return ConversationHandler.END
        
        conn.close()
        log.info(f"Category updated successfully for ad {ad_id}")

        await q.edit_message_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n\n"
            "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return TEXT


    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—É—é –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å
        log.error(f"Error in on_category: {str(e)}", exc_info=True)
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await q.edit_message_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /new")
        except:
            pass
        return ConversationHandler.END

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        text = (update.message.text or "").strip()

        # –î–æ—Å—Ç–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ad_id = context.user_data.get('current_ad_id')
        log.info(f"User {user_id} sent text for ad {ad_id}")

        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(text) > 1000:
            await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return TEXT

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
        ok, reason = auto_moderate(text)
        if not ok:
            await update.message.reply_text(f"–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: {reason}\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.")
            return TEXT

        # –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ï–ö–°–¢ –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
        success = update_ad_text(ad_id, user_id, text)
        
        if not success:
            log.error(f"Failed to update text in DB for ad {ad_id}. User {user_id}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: /new")
            return ConversationHandler.END

        log.info(f"Text for ad {ad_id} updated successfully.")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏
        await update.message.reply_text(
            f"‚úÖ <b>–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç </b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ.\n\n"
            f"<i>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</i>\n\n"
            f"‚Ä¢ <b>–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ</b> —Å–¥–µ–ª–∞–π —Å–∞–º—ã–º –ª—É—á—à–∏–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º (–≥–ª–∞–≤–Ω—ã–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞)\n\n"
            f"‚Ä¢ <b>–ù–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ</b> –ø–æ–∫–∞–∑—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏, —ç—Ç–∏–∫–µ—Ç–∫–∏, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ /done\n"
            "–ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–∂–º–∏ /skip",
            parse_mode="HTML"
        )
        return PHOTOS

    except Exception as e:
        log.error(f"Error in on_text: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /new")
        return ConversationHandler.END
        
async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        
        # –î–æ—Å—Ç–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ get_ad (–æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å!)
        ad_data = get_ad(ad_id, user_id)
        if not ad_data:
            await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        current_photos = ad_data['photos'].split(',') if ad_data['photos'] else []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ
        if len(current_photos) >= MAX_PHOTOS:
            await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
            return PHOTOS

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        new_photo_id = update.message.photo[-1].file_id
        current_photos.append(new_photo_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        success = set_ad_photos(ad_id, user_id, current_photos)
        
        if not success:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return PHOTOS

        await update.message.reply_text(
            f"‚úÖ –§–æ—Ç–æ {len(current_photos)}/{MAX_PHOTOS} –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ /done —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )
        return PHOTOS

    except Exception as e:
        log.error(f"Error in on_photo: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /new")
        return PHOTOS

async def on_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        await update.message.reply_text(
            "‚úÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏.\n" 
            "(—Ç–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä @zk_life_bot )\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /me —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤—ë–ª —Ç–≤–æ–π Telegram username."
        )
        return CONTACT
    
    except Exception as e:
        log.error(f"Error in on_photos_done: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /new")
        return ConversationHandler.END

async def on_photos_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –≤ –ë–î
        success = set_ad_photos(ad_id, user_id, [])
        if not success:
            log.warning(f"Failed to set empty photos for ad {ad_id}")

        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –£–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (—Ç–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä @zk_life_bot ).\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /me —á—Ç–æ–±—ã —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–≤—ë–ª —Ç–≤–æ–π Telegram username."
        )
        return CONTACT

    except Exception as e:
        log.error(f"Error in on_photos_skip: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /new")
        return ConversationHandler.END

async def on_contact_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = user.username
        contact = f"@{username}" if username else f"ID: {user_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–î
        success = set_ad_contact(ad_id, user_id, contact)
        
        if not success:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return CONTACT

        log.info(f"Contact set to {contact} for ad {ad_id}")
        return await confirm_preview(update, context)

    except Exception as e:
        log.error(f"Error in on_contact_me: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: /new")
        return ConversationHandler.END

async def on_contact_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        contact = (update.message.text or "").strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if not contact or len(contact) < 3:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–∞–∫—Ç. –í–≤–µ–¥–∏ —Ç–≤–æ–π –Ω–∏–∫ @username.")
            return CONTACT

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –ë–î
        success = set_ad_contact(ad_id, user_id, contact)
        
        if not success:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return CONTACT

        log.info(f"Contact set to {contact} for ad {ad_id}")
        return await confirm_preview(update, context)

    except Exception as e:
        log.error(f"Error in on_contact_text: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /new")
        return ConversationHandler.END

async def confirm_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ë–î
        ad_data = get_ad(ad_id, user_id)
        if not ad_data:
            await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        preview = (
            f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>\n\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {ad_data['category']}\n\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {ad_data['text']}\n\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {ad_data['contact']}\n\n"
            f"üñºÔ∏è –§–æ—Ç–æ: {len(ad_data['photos'].split(',')) if ad_data['photos'] else 0} —à—Ç."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = [[InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="post_free")]]
        
        if PROVIDER_TOKEN:
            buttons.append([InlineKeyboardButton("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–ª–∞—Ç–Ω–æ)", callback_data="post_paid")])
        
        buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")])

        await update.message.reply_text(
            preview,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )
        return CONFIRM

    except Exception as e:
        log.error(f"Error in confirm_preview: {str(e)}", exc_info=True)
        await update.message.reply_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /new")
        return ConversationHandler.END

async def on_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        q = update.callback_query
        await q.answer()
        user_id = q.from_user.id
        
        ad_id = context.user_data.get('current_ad_id')
        if not ad_id:
            await q.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        ad_data = get_ad(ad_id, user_id)
        if not ad_data:
            await q.edit_message_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–µ–π
        ok, reason = auto_moderate(ad_data['text'])
        if not ok:
            await q.edit_message_text(
                f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É: {reason}\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ (/new)."
            )
            return ConversationHandler.END

        if q.data == "post_cancel":
            # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –ë–î –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
            delete_ad(ad_id, user_id)
            await q.edit_message_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")
            return ConversationHandler.END

        if q.data == "post_free":
            # –ü—É–±–ª–∏–∫—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            await q.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª...")
            await publish_to_channel(context, user_id, priority=False)
            await q.edit_message_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
            return ConversationHandler.END

        if q.data == "post_paid":
            if not PROVIDER_TOKEN:
                await q.edit_message_text("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
                return CONFIRM
            
            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
            price = [LabeledPrice("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è", PRIORITY_PRICE_COP)]
            await context.bot.send_invoice(
                chat_id=user_id,
                title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è",
                description="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤–≤–µ—Ä—Ö—É –ª–µ–Ω—Ç—ã",
                payload=f"priority_{ad_id}",
                provider_token=PROVIDER_TOKEN,
                currency="RUB",
                prices=price,
            )
            await q.edit_message_text("üí≥ –°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã.")
            return PAYMENT

    except Exception as e:
        log.error(f"Error in on_confirm: {str(e)}", exc_info=True)
        try:
            await q.edit_message_text("üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /new")
        except:
            pass
        return ConversationHandler.END

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def on_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        ad_id = context.user_data.get('current_ad_id')
        
        if ad_id:
            # –ü–æ–º–µ—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–µ –≤ –ë–î
            set_ad_paid(ad_id, user_id)
            # –ü—É–±–ª–∏–∫—É–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            await update.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...")
            await publish_to_channel(context, user_id, priority=True)
        else:
            # –ï—Å–ª–∏ ad_id –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn = sqlite3.connect('baraholka.db')
            cursor = conn.cursor()
            cursor.execute(
                'SELECT id FROM ads WHERE user_id = ? ORDER BY id DESC LIMIT 1',
                (user_id,)
            )
            result = cursor.fetchone()
            conn.close()
            
            if result:
                ad_id = result['id']
                set_ad_paid(ad_id, user_id)
                await update.message.reply_text("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—É–±–ª–∏–∫—É–µ–º –≤–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ...")
                await publish_to_channel(context, user_id, priority=True)
            else:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ: /new")

    except Exception as e:
        log.error(f"Error in on_paid: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        

async def publish_to_channel(context: ContextTypes.DEFAULT_TYPE, user_id: int, priority: bool):
    try:
        log.info(f"Starting publication process for user {user_id}, priority: {priority}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        conn = sqlite3.connect('baraholka.db')
        cursor = conn.cursor()
        cursor.execute(
            'SELECT category, text, contact, photos FROM ads WHERE user_id = ? ORDER BY id DESC LIMIT 1',
            (user_id,)
        )
        result = cursor.fetchone()
        conn.close()

        if not result:
            log.error(f"No ad found for user {user_id}")
            await context.bot.send_message(chat_id=user_id, text="‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        category, text, contact, photos_str = result
        photo_ids = photos_str.split(',') if photos_str else []
        
        log.info(f"Ad data: category={category}, text_len={len(text)}, contact={contact}, photos={len(photo_ids)}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = (
            f"{'‚ö° –ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï\n\n' if priority else ''}"
            f"üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n\n"
            f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {text}\n\n"
            f"üë§ **–ö–æ–Ω—Ç–∞–∫—Ç:** {contact}"
        )
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        try:
            if photo_ids:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media = []
                for i, photo_id in enumerate(photo_ids):
                    media.append(InputMediaPhoto(
                        media=photo_id, 
                        caption=caption if i == 0 else None,
                        parse_mode="Markdown"
                    ))
                
                await context.bot.send_media_group(
                    chat_id=CHANNEL_ID,
                    media=media
                )
                log.info(f"Media group sent to channel {CHANNEL_ID} with {len(photo_ids)} photos")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await context.bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=caption,
                    parse_mode="Markdown"
                )
                log.info(f"Text message sent to channel {CHANNEL_ID}")

            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ
            conn = sqlite3.connect('baraholka.db')
            cursor = conn.cursor()
            cursor.execute(
                'UPDATE ads SET is_published = TRUE WHERE user_id = ? AND id = (SELECT MAX(id) FROM ads WHERE user_id = ?)',
                (user_id, user_id)
            )
            conn.commit()
            conn.close()

            await context.bot.send_message(chat_id=user_id, text="‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
            log.info(f"Ad successfully published for user {user_id}")

        except Exception as channel_error:
            log.error(f"Channel publication error: {channel_error}")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ."
            )

    except Exception as e:
        log.error(f"Error in publish_to_channel: {str(e)}", exc_info=True)
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="üòï –ü—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω."
            )
        except:
            pass

async def cmd_check_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        chat = await context.bot.get_chat(CHANNEL_ID)
        await update.message.reply_text(f"–ö–∞–Ω–∞–ª: {chat.title}\nID: {chat.id}\n–¢–∏–ø: {chat.type}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pending.pop(uid, None)
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞—á–Ω–∏ –∑–¥–µ—Å—å¬ª ‚Äî –¥–ª—è –∑–∞–∫—Ä–µ–ø–∞
async def cmd_getbutton(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ù–∞—á–Ω–∏ –∑–¥–µ—Å—å", url=f"https://t.me/{me.username}?start=from_channel")]]
    )
    await update.message.reply_text(
        "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É.",
        reply_markup=kb,
    )


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("getbutton", cmd_getbutton))
    app.add_handler(CommandHandler("play", handle_play))
    app.add_handler(CommandHandler("check", cmd_check_channel))

    # –ò–≥—Ä—ã (inline callbacks)
    app.add_handler(CallbackQueryHandler(game_callback, pattern="^(game_|tl_|rps_)"))

    # –í–æ—Ä–æ–Ω–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (ConversationHandler)
    conv = ConversationHandler(
        entry_points=[CommandHandler("new", cmd_new)],
        states={
            CATEGORY: [CallbackQueryHandler(on_category)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_text)],
            PHOTOS: [
                MessageHandler(filters.PHOTO, on_photo),
                CommandHandler("done", on_photos_done),
                CommandHandler("skip", on_photos_skip),
            ],
            CONTACT: [
                CommandHandler("me", on_contact_me),
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_contact_text),
            ],
            CONFIRM: [CallbackQueryHandler(on_confirm)],
            PAYMENT: [
                PreCheckoutQueryHandler(precheckout),
                MessageHandler(filters.SUCCESSFUL_PAYMENT, on_paid),
            ],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é (reply-–∫–Ω–æ–ø–∫–∏)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        app.run_polling()
    except Conflict as e:
        log.error(f"Conflict error: {e}. Restarting in 10 seconds...")
        time.sleep(10)
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    except Exception as e:
        log.error(f"Unexpected error: {e}. Restarting in 30 seconds...")
        time.sleep(30)
        main()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

if __name__ == "__main__":
    main()


































