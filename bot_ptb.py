# pip install python-telegram-bot==20.3
import re
import logging
from typing import Dict, List, Tuple

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    CallbackQueryHandler, PreCheckoutQueryHandler, ContextTypes, filters
)
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes

WELCOME_DEFAULT = "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª –Ω–∏–∂–µ."
WELCOME_FROM_CHANNEL = "üéâ –í—ã –ø—Ä–∏—à–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª. –ì–æ—Ç–æ–≤—ã –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? –ñ–º–∏—Ç–µ –Ω–∏–∂–µ."

def _menu_kb(bot_username: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="start_new")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞", url="https://t.me/zk_baraholka/1")],  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–º–µ–Ω–∏ —Å—Å—ã–ª–∫—É
    ])

# /start c –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π deep-link: ?start=from_channel
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args or []
    source = args[0] if args else ""
    me = await context.bot.get_me()
    text = WELCOME_FROM_CHANNEL if source == "from_channel" else WELCOME_DEFAULT
    await update.message.reply_text(text, reply_markup=_menu_kb(me.username))

# –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–¥–ª—è –∑–∞–∫—Ä–µ–ø–∞)
async def getbutton(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    deep_link = f"https://t.me/{me.username}?start=from_channel"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üì© –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url=deep_link)]])
    await update.message.reply_text(
        "–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=kb,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ ¬´üìù –ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª
async def menu_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "start_new":
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø–æ–ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ /new (–µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π /new)
        await q.message.reply_text("–û–∫–µ–π! –ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        # –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –ø–æ–∑–∂–µ –ø—Ä–∏–≤—è–∂—ë–º –∫–Ω–æ–ø–∫—É –Ω–∞–ø—Ä—è–º—É—é –∫ —Ç–≤–æ–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ cmd_new.

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
import os
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID  = "@zk_baraholka"      # –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π -100xxxxxxxxx
ADMIN_ID    = 6233188035            # —Ç–≤–æ–π Telegram user id (—á–∏—Å–ª–æ)

# –û–ø–ª–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
PROVIDER_TOKEN = ""                # —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–ÆKassa/CloudPayments)
PRIORITY_PRICE_COP = 30000         # 300 ‚ÇΩ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

MAX_PHOTOS = 5

# –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è
BANNED_WORDS = ["–º–æ—à–µ–Ω–Ω", "–Ω–∞—Ä–∫–æ—Ç", "–æ—Ä—É–∂", "–ø–æ–¥–¥–µ–ª", "—ç—Ä–æ—Ç", "–∏–Ω–≤–µ—Å—Ç", "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫"]
URL_RE = re.compile(r"https?://\S+|www\.\S+", re.IGNORECASE)
MIN_LEN = 10
# ===================================

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("baraholka")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(CATEGORY, TEXT, PHOTOS, CONTACT, CONFIRM, PAYMENT) = range(6)

# –ü–∞–º—è—Ç—å –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (MVP –±–µ–∑ –ë–î)
pending: Dict[int, Dict] = {}  # user_id -> {category, text, photos, contact, paid}


def auto_moderate(text: str) -> Tuple[bool, str]:
    t = (text or "").lower()
    for w in BANNED_WORDS:
        if w in t:
            return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ¬´{w}¬ª."
    if URL_RE.search(text or ""):
        return False, "–°—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã."
    if not text or len(text.strip()) < MIN_LEN:
        return False, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º {MIN_LEN} —Å–∏–º–≤–æ–ª–æ–≤)."
    return True, ""


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª.\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ /new"
    )


async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pending[uid] = {"category": None, "text": "", "photos": [], "contact": "", "paid": False}
    kb = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞", callback_data="cat_sale")],
        [InlineKeyboardButton("–£—Å–ª—É–≥–∏", callback_data="cat_service")],
        [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞", callback_data="cat_buy")],
        [InlineKeyboardButton("–û—Ç–¥–∞–º/–û–±–º–µ–Ω", callback_data="cat_free")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(kb))
    return CATEGORY


async def on_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid not in pending:
        await q.edit_message_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    cat_map = {
        "cat_sale": "–ü—Ä–æ–¥–∞–∂–∞",
        "cat_service": "–£—Å–ª—É–≥–∏",
        "cat_buy": "–ü–æ–∫—É–ø–∫–∞",
        "cat_free": "–û—Ç–¥–∞–º/–û–±–º–µ–Ω",
        "cat_other": "–î—Ä—É–≥–æ–µ",
    }
    pending[uid]["category"] = cat_map.get(q.data, "–î—Ä—É–≥–æ–µ")
    await q.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {pending[uid]['category']}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)."
    )
    return TEXT


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    text = (update.message.text or "").strip()
    if len(text) > 1000:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return TEXT
    pending[uid]["text"] = text
    await update.message.reply_text(
        f"–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É. "
        "–ö–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç ‚Äî /done. –ï—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî /skip."
    )
    return PHOTOS


async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    photos: List[str] = pending[uid]["photos"]
    if len(photos) >= MAX_PHOTOS:
        await update.message.reply_text(f"–ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done.")
        return PHOTOS
    photos.append(update.message.photo[-1].file_id)
    await update.message.reply_text(f"–§–æ—Ç–æ {len(photos)}/{MAX_PHOTOS} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ /done.")
    return PHOTOS


async def on_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    await update.message.reply_text(
        "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username), –ª–∏–±–æ /me —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à username."
    )
    return CONTACT


async def on_photos_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    await update.message.reply_text(
        "–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username), –ª–∏–±–æ /me —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à username."
    )
    return CONTACT


async def on_contact_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    username = update.effective_user.username
    pending[uid]["contact"] = f"@{username}" if username else str(uid)
    return await confirm_preview(update, context)


async def on_contact_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    pending[uid]["contact"] = (update.message.text or "").strip()
    return await confirm_preview(update, context)


async def confirm_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = pending[uid]
    preview = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n\n"
        f"{data['text']}\n\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"–§–æ—Ç–æ: {len(data['photos'])} —à—Ç."
    )
    buttons = [[InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤ –æ—á–µ—Ä–µ–¥—å)", callback_data="post_free")]]
    if PROVIDER_TOKEN:
        buttons.append([InlineKeyboardButton("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–ª–∞—Ç–Ω–æ)", callback_data="post_paid")])
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")])
    await update.message.reply_text("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n" + preview,
                                    reply_markup=InlineKeyboardMarkup(buttons))
    return CONFIRM


async def on_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid not in pending:
        await q.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
        return ConversationHandler.END

    if q.data == "post_cancel":
        pending.pop(uid, None)
        await q.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    ok, reason = auto_moderate(pending[uid]["text"])
    if not ok:
        await q.edit_message_text(
            f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É: {reason}\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ (/new)."
        )
        return ConversationHandler.END

    if q.data == "post_free":
        await q.edit_message_text("–ì–æ—Ç–æ–≤–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        await publish_to_channel(context, uid, priority=False)
        pending.pop(uid, None)
        return ConversationHandler.END

    if q.data == "post_paid":
        if not PROVIDER_TOKEN:
            await q.edit_message_text("–û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
            return ConversationHandler.END
        price = [LabeledPrice("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è", PRIORITY_PRICE_COP)]
        await context.bot.send_invoice(
            chat_id=uid,
            title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è",
            description="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–π–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ (–≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏).",
            payload=f"priority_{uid}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=price,
        )
        await q.edit_message_text("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        return PAYMENT


async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)


async def on_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid in pending:
        pending[uid]["paid"] = True
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        await publish_to_channel(context, uid, priority=True)
        pending.pop(uid, None)


async def publish_to_channel(context: ContextTypes.DEFAULT_TYPE, uid: int, priority: bool):
    data = pending.get(uid) or {}
    caption = f"[{data.get('category','')}] \n\n{data.get('text','')}\n\n–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact','')}"
    if priority:
        caption = "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n" + caption

    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ (–ø—Ä–æ—â–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=caption)
    for fid in data.get("photos") or []:
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=fid)

    # –ê–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞
    try:
        await context.bot.send_message(chat_id=uid, text="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
    except Exception:
        pass


async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pending.pop(uid, None)
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª ‚Äî –¥–ª—è –∑–∞–∫—Ä–µ–ø–∞
async def cmd_getbutton(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", url=f"https://t.me/{me.username}")]]
    )
    await update.message.reply_text(
        "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É.",
        reply_markup=kb,
    )


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("new", cmd_new)],
        states={
            CATEGORY: [CallbackQueryHandler(on_category)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_text)],
            PHOTOS: [
                MessageHandler(filters.PHOTO, on_photo),
                CommandHandler("done", on_photos_done),
                CommandHandler("skip", on_photos_skip),
            ],
            CONTACT: [
                CommandHandler("me", on_contact_me),
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_contact_text),
            ],
            CONFIRM: [CallbackQueryHandler(on_confirm)],
            PAYMENT: [
                PreCheckoutQueryHandler(precheckout),
                MessageHandler(filters.SUCCESSFUL_PAYMENT, on_paid),
            ],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("getbutton", cmd_getbutton))
    app.add_handler(conv)
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("getbutton", getbutton))
app.add_handler(CallbackQueryHandler(menu_callbacks, pattern="^(start_new)$"))

    app.run_polling()


if __name__ == "__main__":
    main()

