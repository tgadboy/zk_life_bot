# pip install python-telegram-bot==20.3
import re
import os
import random
import logging
from typing import Dict, List, Tuple

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@zk_baraholka"       # –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π -100xxxxxxxxx
ADMIN_ID = 6233188035              # —Ç–≤–æ–π Telegram user id (—á–∏—Å–ª–æ)

# –û–ø–ª–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
PROVIDER_TOKEN = ""                # —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–ÆKassa/CloudPayments)
PRIORITY_PRICE_COP = 30000         # 300 ‚ÇΩ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

MAX_PHOTOS = 5

# –ê–≤—Ç–æ-–º–æ–¥–µ—Ä–∞—Ü–∏—è
BANNED_WORDS = ["–º–æ—à–µ–Ω–Ω", "–Ω–∞—Ä–∫–æ—Ç", "–æ—Ä—É–∂", "–ø–æ–¥–¥–µ–ª", "—ç—Ä–æ—Ç", "–∏–Ω–≤–µ—Å—Ç", "–±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫"]
URL_RE = re.compile(r"https?://\S+|www\.\S+", re.IGNORECASE)
MIN_LEN = 10

# –°—Å—ã–ª–∫–∏
CHANNEL_PIN_URL = "https://t.me/zk_baraholka/7"   # –∑–∞–∫—Ä–µ–ø –∫–∞–Ω–∞–ª–∞ (–≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –±–æ—Ç–∞)
RULES_URL = "https://t.me/zk_baraholka/7"        # –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞

# –ò–º—è –∞–¥–º–∏–Ω–∞ (–±–µ–∑ @). –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±—É–¥–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ADMIN_ID.
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "zk_life_admin")
# ===================================

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("baraholka")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
(CATEGORY, TEXT, PHOTOS, CONTACT, CONFIRM, PAYMENT) = range(6)

# –ü–∞–º—è—Ç—å –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ (MVP –±–µ–∑ –ë–î)
pending: Dict[int, Dict] = {}  # user_id -> {category, text, photos, contact, paid}

# ===== –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ (reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) =====
BTN_SELL        = "üí∞ –ü—Ä–æ–¥–∞—Ç—å"
BTN_FIND        = "üîç –ù–∞–π—Ç–∏"
BTN_SERVICE     = "üéØ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —É—Å–ª—É–≥—É"
BTN_ADS         = "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
BTN_FIND_SVC    = "üõ†Ô∏è –ù–∞–π—Ç–∏ —Å–µ—Ä–≤–∏—Å"
BTN_FIND_MASTER = "üíÖ –ù–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞"
BTN_DEALS       = "üî• –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏"
BTN_RULES       = "‚û°Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"
BTN_BONUS       = "üéÅ –ü–æ–ª—É—á–∏—Ç—å 150 ‚ÇΩ"
BTN_PLAY        = "üéÆ –ü–æ–∏–≥—Ä–∞—Ç—å"
BTN_ASK         = "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
BTN_CONTACTS    = "‚òéÔ∏è –í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"

# ===== –ò–ì–†–´: –¥–∞–Ω–Ω—ã–µ =====
GAME_BTN_TL   = "‚úÖ‚ùå –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å"
GAME_BTN_RPS  = "‚úä‚úã‚úåÔ∏è –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞"
GAME_BTN_FACT = "üòÑ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ —à—É—Ç–∫–∞"

TRUTH_OR_LIE: List[Tuple[str, bool]] = [
    ("–°–æ–ª–Ω—Ü–µ ‚Äî —ç—Ç–æ –∑–≤–µ–∑–¥–∞.", True),
    ("–£ —É–ª–∏—Ç–∫–∏ —á–µ—Ç—ã—Ä–µ —Å–µ—Ä–¥—Ü–∞.", False),
    ("–ê–º–∞–∑–æ–Ω–∫–∞ ‚Äî —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –º–∏—Ä–∞.", True),
    ("–ß–µ–ª–æ–≤–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 100% –º–æ–∑–≥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.", False),
    ("–ü–∏–Ω–≥–≤–∏–Ω—ã –∂–∏–≤—É—Ç –Ω–∞ –°–µ–≤–µ—Ä–Ω–æ–º –ø–æ–ª—é—Å–µ.", False),
    ("–ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç —É–¥–∞—Ä–∏—Ç—å –≤ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –¥–≤–∞–∂–¥—ã.", True),
    ("–ó–µ–º–ª—è –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ–∫—Ä—É–≥ –°–æ–ª–Ω—Ü–∞.", True),
    ("–í –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–µ –µ—Å—Ç—å –º–µ–¥–≤–µ–¥–∏.", False),
    ("–í–æ–¥–∞ –∫–∏–ø–∏—Ç –ø—Ä–∏ 50¬∞C.", False),
    ("–ö–æ—à–∫–∏ –º–æ–≥—É—Ç –º—É—Ä–ª—ã–∫–∞—Ç—å.", True),
]

FACTS_OR_JOKES: List[str] = [
    "–§–∞–∫—Ç: –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –≤–æ–π–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª–∏–ª–∞—Å—å –æ–∫–æ–ª–æ 38 –º–∏–Ω—É—Ç.",
    "–®—É—Ç–∫–∞: ‚Äî –î–æ–∫—Ç–æ—Ä, —è –≤–∏–∂—É –±—É–¥—É—â–µ–µ! ‚Äî –ò –∫–∞–∫ –æ–Ω–æ? ‚Äî –†–∞—Å–ø–ª—ã–≤—á–∞—Ç–æ–µ‚Ä¶ —É –≤–∞—Å –æ—á–∫–∏ –∑–∞–ø–æ—Ç–µ–ª–∏.",
    "–§–∞–∫—Ç: –£ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞.",
    "–®—É—Ç–∫–∞: –ú–æ—è –¥–∏–µ—Ç–∞ –ø—Ä–æ—Å—Ç–∞: –µ—Å–ª–∏ —è –Ω–µ –≤–∏–∂—É –µ–¥—ã ‚Äî —è —Å–ø–ª—é.",
    "–§–∞–∫—Ç: –ú—ë–¥ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è.",
    "üêù –ü—á—ë–ª—ã –º–æ–≥—É—Ç —É–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ –ª—é–¥–µ–π.",
    "üåç –í –º–∏—Ä–µ –±–æ–ª—å—à–µ –∫—É—Ä, —á–µ–º –ª—é–¥–µ–π.",
    "üòÇ –ü–æ—á–µ–º—É —É—Ç–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –¥–æ—Ä–æ–≥—É? –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É!",
    "ü™ê –ù–∞ –Æ–ø–∏—Ç–µ—Ä–µ –∏–¥—ë—Ç –¥–æ–∂–¥—å –∏–∑ –∞–ª–º–∞–∑–æ–≤.",
    "üòÑ ‚Äî –ß—Ç–æ —Å–∫–∞–∑–∞–ª –Ω–æ–ª—å –≤–æ—Å—å–º—ë—Ä–∫–µ? ‚Äî –ö–ª–∞—Å—Å–Ω—ã–π —Ä–µ–º–µ–Ω—å!",
]
# ===== –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –∏–≥—Ä =====


# ==== –£–¢–ò–õ–ò–¢–ê –ê–í–¢–û-–ú–û–î–ï–†–ê–¶–ò–ò ====
def auto_moderate(text: str) -> Tuple[bool, str]:
    t = (text or "").lower()
    for w in BANNED_WORDS:
        if w in t:
            return False, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ¬´{w}¬ª."
    if URL_RE.search(text or ""):
        return False, "–°—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã."
    if not text or len(text.strip()) < MIN_LEN:
        return False, f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º {MIN_LEN} —Å–∏–º–≤–æ–ª–æ–≤)."
    return True, ""


# ==== –°–¢–ê–†–¢ + –ú–ï–ù–Æ ====
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n"
        "–Ø –õ–∞–π–≤–±–æ—Ç ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ñ–ö.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ —Ç—ã –∏—â–µ—à—å.\n"
        "–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ ‚Äî —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
        
    )

    buttons = [
        [BTN_SELL, BTN_FIND],
        [BTN_SERVICE, BTN_ADS],
        [BTN_FIND_SVC, BTN_FIND_MASTER],
        [BTN_DEALS, BTN_BONUS],
        [BTN_PLAY, BTN_CONTACTS],
        [BTN_ASK, BTN_RULES],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    await update.message.reply_text(
        text, reply_markup=reply_markup, parse_mode="HTML", disable_web_page_preview=True
    )


# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ú–ï–ù–Æ (reply) ====
async def start_new_with_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
    uid = update.effective_user.id
    pending[uid] = {"category": category, "text": "", "photos": [], "contact": "", "paid": False}
    await update.message.reply_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)."
    )
    return TEXT

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (update.message.text or "").strip()

    if msg == BTN_PLAY:
        await handle_play(update, context)
        return

    if msg == BTN_SELL:
        return await start_new_with_category(update, context, "–ü—Ä–æ–¥–∞–∂–∞")

    if msg == BTN_SERVICE:
        return await start_new_with_category(update, context, "–£—Å–ª—É–≥–∏")

    if msg == BTN_FIND:
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤–µ–ª–æ—Å–∏–ø–µ–¥¬ª, ¬´—Å–¥–∞—é¬ª, ¬´—É—Å–ª—É–≥–∏ —Ä–µ–º–æ–Ω—Ç–∞¬ª.",
            disable_web_page_preview=True,
        )
        return

    if msg == BTN_ADS:
        contact_text = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ–∫–ª–∞–º—ã."
        if ADMIN_USERNAME:
            contact_text += f" –ü–∏—à–∏—Ç–µ: @{ADMIN_USERNAME}"
        else:
            contact_text += f" ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_ID}"
        await update.message.reply_text(contact_text)
        return

    if msg == BTN_FIND_SVC:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –≤—ã –∏—â–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–ª–∏–Ω–∏–Ω–≥, –¥–æ—Å—Ç–∞–≤–∫–∞, –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä) ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏–ª–∏ –¥–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã."
        )
        return

    if msg == BTN_FIND_MASTER:
        await update.message.reply_text(
            "–ö–∞–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏—â–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫, —ç–ª–µ–∫—Ç—Ä–∏–∫, –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä)\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã."
        )
        return

    if msg == BTN_DEALS:
        await update.message.reply_text(
            "–°–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–µ–∂–∏–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ —Ö—ç—à—Ç–µ–≥—É #–∞–∫—Ü–∏–∏.\n"
            "–ü–µ—Ä–µ–π—Ç–∏: https://t.me/zk_baraholka",
            disable_web_page_preview=True,
        )
        return

    if msg == BTN_BONUS:
        await update.message.reply_text(
            "üéÅ –ë–æ–Ω—É—Å 150 ‚ÇΩ: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –≤ –∫–∞–Ω–∞–ª –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω ‚Äî –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å.\n"
            "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    if msg == BTN_CONTACTS:
        await update.message.reply_text(
            "–í–∞–∂–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ñ–ö:\n"
            "‚Ä¢ –û—Ö—Ä–∞–Ω–∞: +7 (000) 000-00-00\n"
            "‚Ä¢ –£–ö: +7 (000) 000-00-01\n"
            "‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 (000) 000-00-02\n"
            "‚Ä¢ –ö–æ–Ω—Å—å–µ—Ä–∂: +7 (000) 000-00-03"
        )
        return

    if msg == BTN_ASK:
        if ADMIN_USERNAME:
            await update.message.reply_text(f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{ADMIN_USERNAME}")
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if msg == BTN_RULES:
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞", url="https://t.me/zk_baraholka/7")]]
        )
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞:",
            reply_markup=kb
        )
        return


    return


# ==== –ò–ì–†–´ ====
async def handle_play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton(GAME_BTN_TL,   callback_data="game_tl")],
        [InlineKeyboardButton(GAME_BTN_RPS,  callback_data="game_rps")],
        [InlineKeyboardButton(GAME_BTN_FACT, callback_data="game_fact")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=InlineKeyboardMarkup(kb))

async def game_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    # –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å ‚Äî –≤–æ–ø—Ä–æ—Å
    if q.data == "game_tl":
        stmt, ans = random.choice(TRUTH_OR_LIE)
        context.user_data["tl_answer"] = ans
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∞–≤–¥–∞", callback_data="tl_true"),
                InlineKeyboardButton("‚ùå –õ–æ–∂—å",   callback_data="tl_false"),
            ]
        ])
        await q.edit_message_text(f"–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å?\n\n{stmt}", reply_markup=kb)
        return

    # –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –ª–æ–∂—å ‚Äî –æ—Ç–≤–µ—Ç
    if q.data in ("tl_true", "tl_false"):
        user_ans = (q.data == "tl_true")
        correct = context.user_data.get("tl_answer")
        text = "üéâ –í–µ—Ä–Ω–æ!" if user_ans == correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ï—â—ë", callback_data="game_tl")]])
        await q.edit_message_text(text, reply_markup=kb)
        return

    # –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ ‚Äî –≤—ã–±–æ—Ä
    if q.data == "game_rps":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úä", callback_data="rps_rock"),
                InlineKeyboardButton("‚úã", callback_data="rps_paper"),
                InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors"),
            ]
        ])
        await q.edit_message_text("–í—ã–±–µ—Ä–∏: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞", reply_markup=kb)
        return

    # –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ ‚Äî —Ä–∞—É–Ω–¥
    if q.data.startswith("rps_"):
        user_choice = q.data.split("_")[1]  # rock/paper/scissors
        bot_choice = random.choice(["rock", "paper", "scissors"])
        names = {"rock": "‚úä –ö–∞–º–µ–Ω—å", "paper": "‚úã –ë—É–º–∞–≥–∞", "scissors": "‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã"}

        result = "–ù–∏—á—å—è!"
        if (user_choice, bot_choice) in [
            ("rock", "scissors"), ("scissors", "paper"), ("paper", "rock")
        ]:
            result = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ"
        elif user_choice != bot_choice:
            result = "–Ø –≤—ã–∏–≥—Ä–∞–ª! üòé"

        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úä", callback_data="rps_rock"),
                InlineKeyboardButton("‚úã", callback_data="rps_paper"),
                InlineKeyboardButton("‚úåÔ∏è", callback_data="rps_scissors"),
            ],
            [InlineKeyboardButton("üîÅ –ï—â—ë", callback_data="game_rps")],
        ])
        await q.edit_message_text(
            f"–¢—ã: {names[user_choice]}\n–Ø: {names[bot_choice]}\n\n{result}",
            reply_markup=kb,
        )
        return

    # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç/—à—É—Ç–∫–∞
    if q.data == "game_fact":
        await q.edit_message_text(random.choice(FACTS_OR_JOKES))
        return


# ==== –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –û–ë–™–Ø–í–õ–ï–ù–ò–ô ====
async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pending[uid] = {"category": None, "text": "", "photos": [], "contact": "", "paid": False}
    kb = [
        [InlineKeyboardButton("–ü—Ä–æ–¥–∞–∂–∞", callback_data="cat_sale")],
        [InlineKeyboardButton("–£—Å–ª—É–≥–∏", callback_data="cat_service")],
        [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞", callback_data="cat_buy")],
        [InlineKeyboardButton("–û—Ç–¥–∞–º/–û–±–º–µ–Ω", callback_data="cat_free")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(kb))
    return CATEGORY

async def on_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid not in pending:
        await q.edit_message_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    cat_map = {
        "cat_sale": "–ü—Ä–æ–¥–∞–∂–∞",
        "cat_service": "–£—Å–ª—É–≥–∏",
        "cat_buy": "–ü–æ–∫—É–ø–∫–∞",
        "cat_free": "–û—Ç–¥–∞–º/–û–±–º–µ–Ω",
        "cat_other": "–î—Ä—É–≥–æ–µ",
    }
    pending[uid]["category"] = cat_map.get(q.data, "–î—Ä—É–≥–æ–µ")
    await q.edit_message_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {pending[uid]['category']}\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)."
    )
    return TEXT

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    text = (update.message.text or "").strip()
    if len(text) > 1000:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return TEXT
    pending[uid]["text"] = text
    await update.message.reply_text(
        f"–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É. "
        "–ö–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç ‚Äî /done. –ï—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî /skip."
    )
    return PHOTOS

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    photos: List[str] = pending[uid]["photos"]
    if len(photos) >= MAX_PHOTOS:
        await update.message.reply_text(f"–ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done.")
        return PHOTOS
    photos.append(update.message.photo[-1].file_id)
    await update.message.reply_text(f"–§–æ—Ç–æ {len(photos)}/{MAX_PHOTOS} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ /done.")
    return PHOTOS

async def on_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    await update.message.reply_text(
        "–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç—ã. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username), –ª–∏–±–æ /me —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à username."
    )
    return CONTACT

async def on_photos_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    await update.message.reply_text(
        "–§–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ @username), –ª–∏–±–æ /me —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à username."
    )
    return CONTACT

async def on_contact_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    username = update.effective_user.username
    pending[uid]["contact"] = f"@{username}" if username else str(uid)
    return await confirm_preview(update, context)

async def on_contact_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in pending:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /new")
        return ConversationHandler.END
    pending[uid]["contact"] = (update.message.text or "").strip()
    return await confirm_preview(update, context)

async def confirm_preview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = pending[uid]
    preview = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n\n"
        f"{data['text']}\n\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n"
        f"–§–æ—Ç–æ: {len(data['photos'])} —à—Ç."
    )
    buttons = [[InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–≤ –æ—á–µ—Ä–µ–¥—å)", callback_data="post_free")]]
    if PROVIDER_TOKEN:
        buttons.append([InlineKeyboardButton("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–ª–∞—Ç–Ω–æ)", callback_data="post_paid")])
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")])
    await update.message.reply_text(
        "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n" + preview,
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    return CONFIRM

async def on_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid not in pending:
        await q.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /new")
        return ConversationHandler.END

    if q.data == "post_cancel":
        pending.pop(uid, None)
        await q.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    ok, reason = auto_moderate(pending[uid]["text"])
    if not ok:
        await q.edit_message_text(
            f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É: {reason}\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ (/new)."
        )
        return ConversationHandler.END

    if q.data == "post_free":
        await q.edit_message_text("–ì–æ—Ç–æ–≤–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        await publish_to_channel(context, uid, priority=False)
        pending.pop(uid, None)
        return ConversationHandler.END

    if q.data == "post_paid":
        if not PROVIDER_TOKEN:
            await q.edit_message_text("–û–ø–ª–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
            return ConversationHandler.END
        price = [LabeledPrice("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è", PRIORITY_PRICE_COP)]
        await context.bot.send_invoice(
            chat_id=uid,
            title="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è",
            description="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–π–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ (–≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏).",
            payload=f"priority_{uid}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=price,
        )
        await q.edit_message_text("–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        return PAYMENT

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def on_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid in pending:
        pending[uid]["paid"] = True
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü—É–±–ª–∏–∫—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")
        await publish_to_channel(context, uid, priority=True)
        pending.pop(uid, None)

async def publish_to_channel(context: ContextTypes.DEFAULT_TYPE, uid: int, priority: bool):
    data = pending.get(uid) or {}
    caption = f"[{data.get('category','')}] \n\n{data.get('text','')}\n\n–ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact','')}"
    if priority:
        caption = "‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n\n" + caption

    await context.bot.send_message(chat_id=CHANNEL_ID, text=caption)
    for fid in data.get("photos") or []:
        await context.bot.send_photo(chat_id=CHANNEL_ID, photo=fid)

    try:
        await context.bot.send_message(chat_id=uid, text="–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
    except Exception:
        pass

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pending.pop(uid, None)
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ù–∞—á–Ω–∏ –∑–¥–µ—Å—å¬ª ‚Äî –¥–ª—è –∑–∞–∫—Ä–µ–ø–∞
async def cmd_getbutton(update: Update, context: ContextTypes.DEFAULT_TYPE):
    me = await context.bot.get_me()
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("–ù–∞—á–Ω–∏ –∑–¥–µ—Å—å", url=f"https://t.me/{me.username}?start=from_channel")]]
    )
    await update.message.reply_text(
        "üì¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ¬´–ñ–ö –ë–∞—Ä–∞—Ö–æ–ª–∫–∞¬ª\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ—Ç—É.",
        reply_markup=kb,
    )


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("getbutton", cmd_getbutton))
    app.add_handler(CommandHandler("play", handle_play))

    # –ò–≥—Ä—ã (inline callbacks)
    app.add_handler(CallbackQueryHandler(game_callback, pattern="^(game_|tl_|rps_)"))

    # –í–æ—Ä–æ–Ω–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (ConversationHandler)
    conv = ConversationHandler(
        entry_points=[CommandHandler("new", cmd_new)],
        states={
            CATEGORY: [CallbackQueryHandler(on_category)],
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_text)],
            PHOTOS: [
                MessageHandler(filters.PHOTO, on_photo),
                CommandHandler("done", on_photos_done),
                CommandHandler("skip", on_photos_skip),
            ],
            CONTACT: [
                CommandHandler("me", on_contact_me),
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_contact_text),
            ],
            CONFIRM: [CallbackQueryHandler(on_confirm)],
            PAYMENT: [
                PreCheckoutQueryHandler(precheckout),
                MessageHandler(filters.SUCCESSFUL_PAYMENT, on_paid),
            ],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é (reply-–∫–Ω–æ–ø–∫–∏)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    app.run_polling()


if __name__ == "__main__":
    main()






